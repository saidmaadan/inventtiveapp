// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  verificationToken VerificationToken?
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  contents      Content[]
  analytics     Analytics[]
  payments      Payment[]
  blogs         Blog[]
  newsletters   Newsletter[]

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String   @unique
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Content {
  id          String   @id @default(cuid())
  title       String?
  description String?
  content     String   @db.Text
  type        String   // e.g., 'article', 'image', 'code'
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Analytics {
  id        String   @id @default(cuid())
  event     String   // e.g., 'content_generated', 'api_call'
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  currency      String
  status        String   // e.g., 'pending', 'completed', 'failed'
  provider      String   // e.g., 'stripe'
  providerData  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model Blog {
  id            String      @id @default(cuid())
  title         String
  content       String?      @db.Text
  slug          String      @unique
  featuredImage String?
  isFeatured    Boolean     @default(false) 
  isPublished   Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt DateTime?   @default(now()) 

  // Relations
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  blogs       Blog[]
}

model Newsletter {
  id           String   @id @default(cuid())
  subject      String
  content      String   @db.Text
  status       String   @default("DRAFT") // DRAFT, SCHEDULED, SENT
  scheduledFor DateTime?
  sentAt       DateTime?
  openRate     Float?
  clickRate    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterSubscriber {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  status       String   @default("ACTIVE") // ACTIVE, UNSUBSCRIBED
  source       String   @default("WEBSITE") // WEBSITE, IMPORT, API
  subscribedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

